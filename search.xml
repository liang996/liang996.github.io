<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>markdown基本语法总结</title>
      <link href="2020/10228960.html"/>
      <url>2020/10228960.html</url>
      
        <content type="html"><![CDATA[<p>markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E6%A0%87%E9%A2%98">标题</a></li><li><a href="#%E5%AD%97%E4%BD%93">字体</a></li><li><a href="#%E5%88%86%E5%89%B2%E7%BA%BF">分割线</a></li><li><a href="#%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C">显示结果:</a></li><li><a href="#%E5%9B%BE%E7%89%87">图片</a></li><li><a href="#%E8%B6%85%E9%93%BE%E6%8E%A5">超链接</a></li><li><a href="#%E8%A1%A8%E6%A0%BC">表格</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E5%AD%97%E4%BD%93%E9%AB%98%E4%BA%AE">字体高亮</a></li></ul><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在想要设置为标题的文字前面加<code>#</code>来表示<br>一个<code>#</code>是一级标题，二个<code>#</code>是二级标题，以此类推。支持六级标题。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 是一级标题</span><span class="token comment" spellcheck="true">## 是二级标题</span><span class="token comment" spellcheck="true">### 是三级标题</span><span class="token comment" spellcheck="true">#### 是四级标题</span></code></pre><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>加粗</strong></p><pre class=" language-bash"><code class="language-bash">要加粗的文字左右分别用两个*号包起来例：**这是加粗的文字**</code></pre><p>显示结果:<br><strong>这是加粗的文字</strong></p><p><strong>斜体</strong></p><pre class=" language-bash"><code class="language-bash">要倾斜的文字左右分别用一个*号包起来例：*这是倾斜的文字*</code></pre><p>显示结果:<br><em>这是加粗的文字</em></p><p><strong>斜体加粗</strong></p><pre class=" language-bash"><code class="language-bash">要倾斜和加粗的文字左右分别用三个*号包起来例：***这是斜体加粗的文字***</code></pre><p>显示结果:<br><strong><em>这是斜体加粗的文字</em></strong></p><p><strong>删除线</strong></p><pre class=" language-bash"><code class="language-bash">要加删除线的文字左右分别用两个~~号包起来例：~~这是加删除线的文字~~</code></pre><p>显示结果:<br><del>这是加删除线的文字</del></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><pre class=" language-bash"><code class="language-bash">三个或者三个以上的 - 或者 * 都可以。示例：-------********</code></pre><p><strong><em>显示结果:</em></strong></p><hr><hr><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=473486950,2061554047&amp;fm=26&amp;gp=0.jpg" alt="办公室图片"></p><pre class=" language-bash"><code class="language-bash">语法：<span class="token operator">!</span><span class="token punctuation">[</span>图片alt<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址 <span class="token string">''</span>图片title<span class="token string">''</span><span class="token punctuation">)</span></code></pre><p><code>注释</code>：<br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>超链接名<span class="token punctuation">]</span><span class="token punctuation">(</span>超链接地址 <span class="token string">"超链接title"</span><span class="token punctuation">)</span>title可加可不加</code></pre><p><a href="http://baidu.com/" title="百度一下">百度一下</a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class=" language-bash"><code class="language-bash">语法：<span class="token operator">|</span> 表头 <span class="token operator">|</span> 表头  <span class="token operator">|</span> 表头 <span class="token operator">|</span><span class="token operator">|</span> ---- <span class="token operator">|</span> :---: <span class="token operator">|</span> ---: <span class="token operator">|</span><span class="token operator">|</span> 内容 <span class="token operator">|</span> 内容  <span class="token operator">|</span> 内容 <span class="token operator">|</span><span class="token operator">|</span> 内容 <span class="token operator">|</span> 内容  <span class="token operator">|</span> 内容 <span class="token operator">|</span></code></pre><p><code>注释</code>：第二行分割表头和内容。</p><p><code>-</code>有一个就行，为了对齐，多加了几个<br>文字默认居左</p><p><code>-</code>两边加：表示文字居中</p><p><code>-</code>右边加：表示文字居右</p><p><code>注</code>：原生的语法两边都要用 | 包起来。此处省略）</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">|</span> 参数 <span class="token operator">|</span> 参数  <span class="token operator">|</span> 参数 <span class="token operator">|</span><span class="token operator">|</span> :--- <span class="token operator">|</span> :---: <span class="token operator">|</span> ---: <span class="token operator">|</span><span class="token operator">|</span> 0    <span class="token operator">|</span>   1   <span class="token operator">|</span>    1 <span class="token operator">|</span><span class="token operator">|</span> 0    <span class="token operator">|</span>   2   <span class="token operator">|</span>    1 <span class="token operator">|</span></code></pre><p>显示结果:<br>| 参数 | 参数  | 参数 |<br>| :— | :—: | —: |<br>| 0    |   1   |    1 |<br>| 0    |   2   |    1 |</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>语法：</p><ul><li><p>单行代码：代码之间分别用一个反引号包起来<br>  <code>代码内容</code></p></li><li><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p></li></ul><p><strong>单行代码:一个反引号`</strong></p><p><code>document.write(isNaN(123))</code></p><p><strong>代码块:三个反引号`</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> isEmpty<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof obj <span class="token operator">==</span> <span class="token string">"undefined"</span> <span class="token operator">||</span> obj <span class="token operator">==</span> null <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="字体高亮"><a href="#字体高亮" class="headerlink" title="字体高亮"></a>字体高亮</h2><pre class=" language-bash"><code class="language-bash">语法：用单引号把要显示高亮的单词围起来</code></pre><p>例子：<code>要显示高亮的单词</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常见判断</title>
      <link href="2020/102142099.html"/>
      <url>2020/102142099.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>这里是我的笔记，记录一些JavaScript常见判断的常用方法，这个笔记后面慢慢增加了许多内容，如果有错误之处，请各位多多指教。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E8%BF%87%E4%B8%80%E8%BF%87%E5%9F%BA%E7%A1%80javascript7%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB">过一过基础，JavaScript7种数据类型汇总</a></li><li><a href="#javascript%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97">JavaScript判断是否为数字</a></li><li><a href="#javascript%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA">JavaScript判断字符串是否为空</a></li><li><a href="#javascript%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA-1">JavaScript判断字符串是否为空</a></li><li><a href="#js%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%80%BC">js判断数组是否含有某个值</a></li><li><a href="#js%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA">js判断一个对象是否为空</a></li><li><a href="#js%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89">js判断两个数组是否相等</a></li><li><a href="#js%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95">JS中如何对象转数组方法</a></li><li><a href="#js%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B0%E7%BB%84">js判断是否是数组</a></li><li><a href="#js%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0">js判断数组是否存在重复元素</a></li><li><a href="#js%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E5%80%BC">JS如何去除数组重复值</a></li><li><a href="#js%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0">JS如何获取数组重复的元素</a></li></ul><h2 id="过一过基础，JavaScript7种数据类型汇总"><a href="#过一过基础，JavaScript7种数据类型汇总" class="headerlink" title="过一过基础，JavaScript7种数据类型汇总"></a>过一过基础，JavaScript7种数据类型汇总</h2><ul><li>基本类型：String、Number、Boolean、Symbol、Undefined、Null</li><li>引用类型：Object</li></ul><h2 id="JavaScript判断是否为数字"><a href="#JavaScript判断是否为数字" class="headerlink" title="JavaScript判断是否为数字"></a>JavaScript判断是否为数字</h2><p><strong>使用isNaN()函数：</strong></p><p>isNaN()函数是js自带的全局函数，isNaN() 函数用于检查其参数是否是非数字值。</p><p><strong>实例参考：</strong></p><pre class=" language-bash"><code class="language-bash">document.write<span class="token punctuation">(</span>isNaN<span class="token punctuation">(</span>123<span class="token punctuation">))</span><span class="token punctuation">;</span>//数字 输出：falsedocument.write<span class="token punctuation">(</span>isNaN<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//字符串输出：true</code></pre><p><strong>缺点：</strong></p><p>isNaN()会将 null、空格以及空串按照0来处理，所以检查不严谨。<br>所以用加工一下，和typeof运算符一起使用。</p><p><strong>实例参考：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> myIsNaN<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">((</span>typeof value <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isNaN<span class="token punctuation">(</span>value<span class="token punctuation">))</span> + <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">myIsNaN<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token punctuation">;</span>//truemyIsNaN<span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> //falsemyIsNaN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //falsemyIsNaN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //false</code></pre><h2 id="JavaScript判断字符串是否为空"><a href="#JavaScript判断字符串是否为空" class="headerlink" title="JavaScript判断字符串是否为空"></a>JavaScript判断字符串是否为空</h2><p><strong>实例参考：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> isEmpty<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>typeof obj <span class="token operator">==</span> <span class="token string">"undefined"</span> <span class="token operator">||</span> obj <span class="token operator">==</span> null <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>isEmpty<span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//false</code></pre><h2 id="JavaScript判断字符串是否为空-1"><a href="#JavaScript判断字符串是否为空-1" class="headerlink" title="JavaScript判断字符串是否为空"></a>JavaScript判断字符串是否为空</h2><p><strong>实例参考：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr.length <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"数组为空"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"数组不为空"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="js判断数组是否含有某个值"><a href="#js判断数组是否含有某个值" class="headerlink" title="js判断数组是否含有某个值"></a>js判断数组是否含有某个值</h2><p><strong>实例参考：</strong></p><p><strong>(1). 使用indexOf()方法</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr.indexOf<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token operator">!=</span> - 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"数组含有2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"数组不含2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>(2).使用includes()方法</strong><br>数组中含有某值返回true，没有返回false。ES7新方法。</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr.includes<span class="token punctuation">(</span>2<span class="token punctuation">))</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"数组中有2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"数组中无2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>(3).使用find()方法</strong><br>数组中含有某值返回true，没有返回false。ES7新方法。</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.find<span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span><span class="token operator">=</span> 2<span class="token punctuation">)</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"数组含有2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="js判断一个对象是否为空"><a href="#js判断一个对象是否为空" class="headerlink" title="js判断一个对象是否为空"></a>js判断一个对象是否为空</h2><p><strong>实例参考：</strong></p><p><strong>(1). 使用Object.keys(obj)方法</strong><br>返回一个给定对象自身可枚举属性组成的数组。</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Object.keys<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>.length <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"空对象"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"非空对象"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>(2).使用JSON.stringify() 方法</strong><br>从一个对象中解析出字符串</p><p><strong>用法</strong></p><pre class=" language-bash"><code class="language-bash">JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"a"</span><span class="token keyword">:</span> <span class="token string">"1"</span>, <span class="token string">"b"</span><span class="token keyword">:</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>结果是：<span class="token string">"{"</span>a<span class="token string">":"</span>1<span class="token string">","</span>b<span class="token string">":"</span>2<span class="token string">"}"</span></code></pre><p><strong>实例</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>JSON.stringify<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"{}"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"空对象"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"非空对象"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="js判断两个数组是否相等"><a href="#js判断两个数组是否相等" class="headerlink" title="js判断两个数组是否相等"></a>js判断两个数组是否相等</h2><p><strong>实例1</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">[</span>1, 2, 3<span class="token punctuation">]</span>.sort<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token operator">==</span><span class="token operator">=</span> JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">[</span>3, 2, 1<span class="token punctuation">]</span>.sort<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //true</code></pre><p><strong>实例2</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span><span class="token punctuation">[</span>1, 2, 3<span class="token punctuation">]</span>.sort<span class="token punctuation">(</span><span class="token punctuation">)</span>.toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token punctuation">[</span>3, 2, 1<span class="token punctuation">]</span>.sort<span class="token punctuation">(</span><span class="token punctuation">)</span>.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //true</code></pre><p><code>注意</code>，经验证，上述方法对复杂数组结构不适用。</p><h2 id="JS中如何对象转数组方法"><a href="#JS中如何对象转数组方法" class="headerlink" title="JS中如何对象转数组方法"></a>JS中如何对象转数组方法</h2><p><strong>(1).使用Array.from()方法</strong></p><p>Array.from() 方法，用于数组的浅拷贝。就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</p><p><strong>用法</strong></p><pre class=" language-bash"><code class="language-bash">JSON.stringify<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"a"</span><span class="token keyword">:</span> <span class="token string">"1"</span>, <span class="token string">"b"</span><span class="token keyword">:</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>结果是：<span class="token string">"{"</span>a<span class="token string">":"</span>1<span class="token string">","</span>b<span class="token string">":"</span>2<span class="token string">"}"</span></code></pre><p><strong>实例</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>0: <span class="token string">'nihao'</span>,1: <span class="token string">'haha'</span>,2: <span class="token string">'gansha'</span>,<span class="token string">'length'</span><span class="token keyword">:</span> 3<span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> Array.from<span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>//<span class="token punctuation">[</span><span class="token string">'nihao'</span>, <span class="token string">'haha'</span>, <span class="token string">'gansha'</span><span class="token punctuation">]</span></code></pre><p> <strong>(2).使用Object.keys(object)</strong></p><p><strong>实例</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>0: <span class="token string">'nihao'</span>,1: <span class="token string">'haha'</span>,2: <span class="token string">'gansha'</span>,<span class="token string">'length'</span><span class="token keyword">:</span> 3<span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> Array.from<span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>0, 1, 2<span class="token punctuation">]</span></code></pre><h2 id="js判断是否是数组"><a href="#js判断是否是数组" class="headerlink" title="js判断是否是数组"></a>js判断是否是数组</h2><p> <strong>通过Array.isArray()判断</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3<span class="token punctuation">]</span>Array.isArray<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>//true</code></pre><h2 id="js判断数组是否存在重复元素"><a href="#js判断数组是否存在重复元素" class="headerlink" title="js判断数组是否存在重复元素"></a>js判断数组是否存在重复元素</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 4, 3, 4, 5<span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>new Set<span class="token punctuation">(</span>arr<span class="token punctuation">))</span><span class="token punctuation">;</span>//Set <span class="token punctuation">{</span> 1, 2, 4, 3, 5 <span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>new Set<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>.size<span class="token punctuation">)</span><span class="token punctuation">;</span>//5console.log<span class="token punctuation">(</span>arr.length<span class="token punctuation">)</span><span class="token punctuation">;</span>//6<span class="token keyword">if</span> <span class="token punctuation">(</span>new Set<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>.size <span class="token operator">!=</span><span class="token operator">=</span> arr.length<span class="token punctuation">)</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">"存在相同的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>注意</code>，经验证，上述方法对复杂数组结构不适用。</p><p> <strong>补充js里size和length的区别</strong></p><p><code>length</code></p><ul><li>length是js的原生方法，用于获取元素的个数和对象的长度</li><li>var length = $(obj).length;</li></ul><p><code>size</code></p><ul><li>size()属于方法，只能作用于对象上，获取元素的个数</li><li>var size = $(obj).size();</li><li>注：如果想要获取字符串的长度只能用length属性，如</li><li>var length = $(obj).html().length;</li></ul><h2 id="JS如何去除数组重复值"><a href="#JS如何去除数组重复值" class="headerlink" title="JS如何去除数组重复值"></a>JS如何去除数组重复值</h2><p><strong>运用ES6的Set数据结构</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 4, 3, 6, 3, 4<span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>new Set<span class="token punctuation">(</span>arr<span class="token punctuation">))</span></code></pre><h2 id="JS如何获取数组重复的元素"><a href="#JS如何获取数组重复的元素" class="headerlink" title="JS如何获取数组重复的元素"></a>JS如何获取数组重复的元素</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> refrain<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>var tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Array.isArray<span class="token punctuation">(</span>arr<span class="token punctuation">))</span> <span class="token punctuation">{</span>arr.concat<span class="token punctuation">(</span><span class="token punctuation">)</span>.sort<span class="token punctuation">(</span><span class="token punctuation">)</span>.sort<span class="token punctuation">(</span>function <span class="token punctuation">(</span>a, b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> tmp.indexOf<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> - 1<span class="token punctuation">)</span> tmp.push<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>var arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>12, 1, 3, 2, 3, 3<span class="token punctuation">]</span><span class="token punctuation">;</span>var arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span>, <span class="token string">"3"</span>, <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>refrain<span class="token punctuation">(</span>arr1<span class="token punctuation">))</span><span class="token punctuation">;</span>// <span class="token punctuation">[</span> 3 <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>refrain<span class="token punctuation">(</span>arr2<span class="token punctuation">))</span><span class="token punctuation">;</span>// <span class="token punctuation">[</span> <span class="token string">'1'</span> <span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js遍历数组及对数组进行增删改查方法汇总</title>
      <link href="2020/102142099.html"/>
      <url>2020/102142099.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>这里是我的笔记，记录一些js遍历数组及对数组进行增删改查的常用方法，这个笔记后面慢慢增加了许多内容，如果有错误之处，请各位多多指教。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><!-- TOC --><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a><ul><li><a href="#for%E9%81%8D%E5%8E%86">for遍历</a></li><li><a href="#for-in%E9%81%8D%E5%8E%86">for in遍历</a></li><li><a href="#for-of%E5%BE%AA%E7%8E%AF">for of循环</a></li><li><a href="#foreach%E9%81%8D%E5%8E%86">forEach遍历</a></li><li><a href="#map%E9%81%8D%E5%8E%86">map遍历</a></li><li><a href="#filter-%E6%96%B9%E6%B3%95">filter()  方法</a></li><li><a href="#every-%E6%96%B9%E6%B3%95">every() 方法</a></li><li><a href="#some%E6%96%B9%E6%B3%95">some方法</a></li><li><a href="#find%E6%96%B9%E6%B3%95">find方法</a></li><li><a href="#reduce%E6%96%B9%E6%B3%95-%E6%B1%82%E5%92%8C%E7%94%A8">reduce方法 (求和用)</a></li><li><a href="#concat%E6%96%B9%E6%B3%95%E5%90%88%E5%B9%B6%E6%95%B0%E7%BB%84">concat方法（合并数组）</a></li><li><a href="#join%E6%96%B9%E6%B3%95">join方法</a></li><li><a href="#pop%E6%96%B9%E6%B3%95">pop方法</a></li><li><a href="#shift%E6%96%B9%E6%B3%95">shift方法</a></li><li><a href="#unshift%E6%96%B9%E6%B3%95">unshift方法</a></li><li><a href="#push%E6%96%B9%E6%B3%95">push方法</a></li><li><a href="#reverse%E6%96%B9%E6%B3%95">reverse方法</a></li><li><a href="#sort%E6%96%B9%E6%B3%95">sort方法</a></li><li><a href="#slice%E6%96%B9%E6%B3%95">slice方法</a></li><li><a href="#splice%E6%96%B9%E6%B3%95">splice方法</a></li><li><a href="#tostring">toString()</a></li><li><a href="#indexof">IndexOf()</a></li><li><a href="#lastindexof">lastIndexOf();</a></li><li><a href="#substring">substring()</a></li></ul></li></ul><h2 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h2><p><strong>方法解释：</strong></p><ul><li>表达式1：赋值表达式，用来给控制变量赋初值。（只执行一次）</li><li>表达式2：逻辑表达式，是循环的控制条件，用来判断控制变量是否符合循环条件，否则跳出循环。</li><li>表达式3：赋值表达式，用来对控制变量进行增量或减量操作。</li></ul><p><strong>执行步骤：</strong></p><ul><li>1.声明变量 a = 0</li><li>2.if (a &lt;arr.length ) 继续运行</li><li>3.每执行一次 a += 1</li><li>4.当不满足 a &lt; 10 for循环结束 </li></ul><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4, 5, 6, 7<span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>let a <span class="token operator">=</span> 0<span class="token punctuation">;</span> a <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> a++<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">1, 2, 3, 4, 5, 6, 7</code></pre><h2 id="for-in遍历"><a href="#for-in遍历" class="headerlink" title="for in遍历"></a>for in遍历</h2><ul><li>for…in 语句用于对数组或者对象的属性进行循环操作。</li><li>for … in 循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。</li></ul><p><strong>基本语法：</strong></p><pre><code> for (变量 in 对象) {    在此执行代码 }</code></pre><p><strong>(1).for in遍历对象</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> id: 1, name: <span class="token string">"王力宏"</span>, age: 38 <span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>let key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span><span class="token string">'obj的key:'</span>, key, <span class="token string">'  obj的value:'</span>, obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash"> 结果： obj的key: <span class="token function">id</span>      obj的value: 1 obj的key: name    obj的value: 王力宏 obj的key: age     obj的value: 38</code></pre><p><strong>(2).for in遍历数组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>7, 3, 5, 6<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>let key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  // console.log<span class="token punctuation">(</span>key<span class="token punctuation">)</span> //0,1,2,3  // console.log<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> //7,3,5,6  console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> //出现四次<span class="token punctuation">[</span> 7, 3, 5, 6 <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>不推荐用for-in来循环一个数组，因为，不像对象，数组的 index 跟普通的对象属性不一样，是重要的数值序列指标。总之， for – in 是用来循环带有字符串key的对象的方法。</p><h2 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for of循环"></a>for of循环</h2><p>for-of循环，它既比传统的for循环简洁，同时弥补了forEach和for-in循环的短板。</p><p><strong>基本语法</strong></p><pre class=" language-bash"><code class="language-bash"> <span class="token keyword">for</span> <span class="token punctuation">(</span>var value of myArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>语法看起来跟for-in很相似，但它的功能却丰富的多，它能循环很多东西。</p><p><strong>(1).for of遍历数组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>7, 3, 5, 6<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>let key of arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>key<span class="token punctuation">)</span> //7, 3, 5, 6<span class="token punctuation">}</span></code></pre><p><strong>(2).for of循环一个字符串</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"我是中国人"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>let value of str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> //我是中国人<span class="token punctuation">}</span></code></pre><h2 id="forEach遍历"><a href="#forEach遍历" class="headerlink" title="forEach遍历"></a>forEach遍历</h2><p>forEach() 方法对数组的每个元素执行一次提供的函数。forEach() 需要一个回调函数，作为参数，该方法中的function回调有三个参数：</p><ul><li>第一个参数是遍历的数组内容，</li><li>第二个参数是对应的数组索引，</li><li>第三个参数是数组本身</li></ul><p><strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token punctuation">]</span>.forEach<span class="token punctuation">(</span>function<span class="token punctuation">(</span>value,index,array<span class="token punctuation">)</span><span class="token punctuation">{</span>//code something<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>例.取下面数组的和</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> 0<span class="token punctuation">;</span>arr.forEach<span class="token punctuation">((</span>value, index, array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span>value<span class="token punctuation">)</span> //1, 2, 3, 4, 5, 6  console.log<span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> //1, 2, 3, 4, 5, 6  a +<span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> // a +<span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token operator">=</span>a+value<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  //21</code></pre><h2 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h2><p>  map（）方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组,循环中的map意思为“映射”，map方法和forEach方法类似，和forEach不同的是，map有返回值,在工作中如果需要根据条件重组数组，用map会很方便。</p><p>  <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash"> array.map<span class="token punctuation">(</span>function<span class="token punctuation">(</span>currentValue,index,arr<span class="token punctuation">)</span>,thisValue<span class="token punctuation">)</span></code></pre><p>  <strong>参数描述:</strong></p><ul><li>currentValue：【必填】数组中正在处理的当前元素。</li><li>index：【可选】数组中正在处理的当前元素的索引。</li><li>arr：【可选】方法被调用的数组。也就是当前元素属于的数组对象。</li><li>thisValue：【可选】执行回调函数时使用的this值。</li><li>map的回调函数中支持return返回值；return的并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了</li></ul><p><strong>例.将数组里面的值都乘以3</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 3, 4, 6<span class="token punctuation">]</span><span class="token punctuation">;</span>//Es5写法<span class="token keyword">let</span> num <span class="token operator">=</span> arr.map<span class="token punctuation">(</span>function <span class="token punctuation">(</span>value, index, array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> value * 3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//ES6箭头函数写法<span class="token keyword">let</span> num <span class="token operator">=</span> arr.map<span class="token punctuation">((</span>value, index, array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value * 3<span class="token punctuation">)</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>// 原数组拷贝了一份，并进行了修改,结果为<span class="token punctuation">[</span> 3, 9, 12, 18 <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//  原数组并未发生变化,结果为<span class="token punctuation">[</span> 1, 3, 4, 6 <span class="token punctuation">]</span></code></pre><p><code>注意</code>：map 和 forEach 方法都是只能用来遍历数组，不能用来遍历普通对象。</p><h2 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()  方法"></a>filter()  方法</h2><p>filter 方法是 Array 对象内置方法，它会返回通过过滤的元素，不改变原来的数组。</p><p>  <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">  arr.filter<span class="token punctuation">(</span>callback<span class="token punctuation">[</span>, thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>用法说明：filter 为数组中的每个元素调用一次 callback 函数，并利用所有使得 callback 返回 true 或 等价于 true 的值 的元素创建一个新数组。</li></ul><p><strong>例.筛选排除掉所有的小于5的数</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>3, 4, 7, 2, 9, 11<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.filter<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> 5<span class="token punctuation">)</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//得到新数组<span class="token punctuation">[</span>7, 9, 11<span class="token punctuation">]</span></code></pre><h2 id="every-方法"><a href="#every-方法" class="headerlink" title="every() 方法"></a>every() 方法</h2><p>every()是对数组中的每一项运行给定函数，如果该函数对每一项返回true,则返回true。every方法返回值是布尔类型,针对数组中的每一个元素进行比对，只要有一个元素比对结果为false则返回false，反之要所有的元素比对结果为true才为true</p><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//得到新数组<span class="token punctuation">[</span>7, 9, 11<span class="token punctuation">]</span></code></pre><p> <strong>例.判断数组中所有的值是否都大于3,，有一个条件不满足则返回false</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.every<span class="token punctuation">((</span>item, indec, array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> 3<span class="token punctuation">)</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//因为1，2小于3，存在不满足值，所以得出结果为false</code></pre><h2 id="some方法"><a href="#some方法" class="headerlink" title="some方法"></a>some方法</h2><p> some()是对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。 some方法返回值是布尔类型，同样是针对数组中的每一个元素，但是这个方法是，只要有一个元素比对结果为true，返回结果就为true，反之要所有的元素比对结果为false才为false</p><p> <strong>例.判断数组中是否存在大于3的值，有一个条件满足则返回true</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.some<span class="token punctuation">((</span>item, indec, array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> 3<span class="token punctuation">)</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//尽管1，2小于3，存在不满足值，但是some是判断其中一个满足条件就为true结果为true</code></pre><h2 id="find方法"><a href="#find方法" class="headerlink" title="find方法"></a>find方法</h2><p> find()方法返回第一个满足过滤方法的元素，一个都没有满足的就返回undefined，遇到一个满足的元素后遍历就停止了,这个方法支持的浏览器太少，慎用</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>3, 6, 1, 4, 7<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.find<span class="token punctuation">((</span>item, indec, array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> 3<span class="token punctuation">)</span></code></pre><p> <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//由于数组中满足条件的第一个数数6，所以结果返回6</code></pre><h2 id="reduce方法-求和用"><a href="#reduce方法-求和用" class="headerlink" title="reduce方法 (求和用)"></a>reduce方法 (求和用)</h2><p>reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。</p><p>   <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">arr.reduce<span class="token punctuation">(</span>function<span class="token punctuation">(</span>prev,cur,index,arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span>, init<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>参数解析：</li><li>arr 表示原数组；</li><li>prev 表示上一次调用回调时的返回值，或者初始值 init;</li><li>cur 表示当前正在处理的数组元素；</li><li>index 表示当前正在处理的数组元素的索引，若提供 init 值，则索引为0，否则索引为1；</li><li>init 表示初始值。</li><li>注意: reduce() 对于空数组是不会执行回调函数的。</li><li>/</li></ul><p><strong>求和实例：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>3, 6, 1, 4, 7<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.reduce<span class="token punctuation">((</span>total, value, index, arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> total + value<span class="token punctuation">)</span></code></pre><p>   <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//21</code></pre><h2 id="concat方法（合并数组）"><a href="#concat方法（合并数组）" class="headerlink" title="concat方法（合并数组）"></a>concat方法（合并数组）</h2><p>  concat() 方法用于连接两个或多个数组。可以合并一个或多个数组，会返回合并数组之后的数据，不会改变原来的数组；该方法没有改变原有字符串，但是会返回连接两个或多个字符串新字符串。</p><p><strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash"> string.concat<span class="token punctuation">(</span>string1, string2, <span class="token punctuation">..</span>., stringX<span class="token punctuation">)</span></code></pre><p><strong>合并数组实例：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span>, <span class="token string">"b"</span>, <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"d"</span>, <span class="token string">"e"</span>, <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token keyword">let</span> c <span class="token operator">=</span> a.concat<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>   <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>c<span class="token punctuation">)</span> //<span class="token punctuation">[</span> <span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'c'</span>, <span class="token string">'d'</span>, <span class="token string">'e'</span>, <span class="token string">'f'</span> <span class="token punctuation">]</span></code></pre><h2 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h2><p>join() 方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。<br><strong>基本语法:</strong></p><ul><li>arrayObject.join(separator)</li><li>separator    可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</li><li>返回结果为一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入separator 字符串而生成的。</li></ul><p><strong>例1：将创建一个数组，然后把它的所有元素放入一个字符串：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span>, <span class="token string">"李四"</span>, <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>   <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//张三,李四,王五,注意：如果（）没有参数，则使用逗号作为分隔符console.log<span class="token punctuation">(</span>typeof num<span class="token punctuation">)</span>//string</code></pre><p><strong>例2：将使用分隔符来分隔数组中的元素：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span>, <span class="token string">"李四"</span>, <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.join<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span></code></pre><p>   <strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//张三*李四*王五console.log<span class="token punctuation">(</span>typeof num<span class="token punctuation">)</span>//string</code></pre><h2 id="pop方法"><a href="#pop方法" class="headerlink" title="pop方法"></a>pop方法</h2><p>pop方法用于删除数组的最后一位，并且返回删除的数据，会改变原来的数组</p><p><strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">arrayObject.pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>说明pop() 方法将删除 arrayObject 的最后一个元素，把数组长度减 1，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。</li><li>返回结果为arrayObject 的最后一个元素。</li></ul><p><strong>例1：有值数组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span>, <span class="token string">"李四"</span>, <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">'张三'</span>, <span class="token string">'李四'</span> <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//王五</code></pre><p><strong>例2：空值数组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span><span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//undefined</code></pre><h2 id="shift方法"><a href="#shift方法" class="headerlink" title="shift方法"></a>shift方法</h2><p>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</p><p><strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">arrayObject.shift<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span>, <span class="token string">"李四"</span>, <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.shift<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span>  <span class="token string">"李四"</span>, <span class="token string">"王五"</span> <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//张三</code></pre><h2 id="unshift方法"><a href="#unshift方法" class="headerlink" title="unshift方法"></a>unshift方法</h2><p>unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。与shift方法相反</p><p><strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">arrayObject.unshift<span class="token punctuation">(</span>newelement1,newelement2,<span class="token punctuation">..</span><span class="token punctuation">..</span>,newelementX<span class="token punctuation">)</span></code></pre><p> unshift() 方法将把它的参数插入 arrayObject 的头部，并将已经存在的元素顺次地移到较高的下标处，以便留出空间。该方法的第一个参数将成为数组的新元素 0，如果还有第二个参数，它将成为新的元素 1，以此类推。</p><p><strong>例：向数组的开头添加元素</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span>, <span class="token string">"李四"</span>, <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.unshift<span class="token punctuation">(</span><span class="token string">"小米"</span>, <span class="token string">"小百"</span><span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">'小米'</span>, <span class="token string">'小百'</span>, <span class="token string">'张三'</span>, <span class="token string">'李四'</span>, <span class="token string">'王五'</span> <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//会取出该数组新的长度：5</code></pre><p><code>注意</code>unshift方法：unshift()、shift() 是从数组的头部进行增减。unshift() 方法不创建新的创建，而是直接修改原有的数组。</p><h2 id="push方法"><a href="#push方法" class="headerlink" title="push方法"></a>push方法</h2><p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度,与pop方法相反</p><p><strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">arrayObject.push<span class="token punctuation">(</span>newelement1,newelement2,<span class="token punctuation">..</span><span class="token punctuation">..</span>,newelementX<span class="token punctuation">)</span></code></pre><ul><li>push() 方法可把它的参数顺序添加到 arrayObject 的尾部。它直接修改 arrayObject，而不是创建一个新的数组。push() 方法和 pop() 方法使用数组提供的先进后出栈的功能。</li></ul><p><strong>例：向数组的末尾添加元素</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span>, <span class="token string">"李四"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.push<span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">'张三'</span>, <span class="token string">'李四'</span>, <span class="token string">'王五'</span> <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//3</code></pre><p> <code>注意</code>push方法：push()、pop() 是从数组的尾部进行增减</p><h2 id="reverse方法"><a href="#reverse方法" class="headerlink" title="reverse方法"></a>reverse方法</h2><p>reverse方法:颠倒数组中元素的顺序</p><p><strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">array.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>功能：将数组的数据进行反转，并且返回反转后的数组，会改变原数组</li></ul><p><strong>例：颠倒数组顺序</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span>, <span class="token string">'李四'</span>, <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">'王五'</span>, <span class="token string">'李四'</span>, <span class="token string">'张三'</span>  <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">'王五'</span>, <span class="token string">'李四'</span>, <span class="token string">'张三'</span>  <span class="token punctuation">]</span></code></pre><h2 id="sort方法"><a href="#sort方法" class="headerlink" title="sort方法"></a>sort方法</h2><p>sort方法用于对数组对元素进行排序，默认为升序。并且返回排过序的新数组<br><strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">arrayObject.sort（sortby）</code></pre><p><strong>参数说明:</strong></p><ul><li><p><code>sortby</code>为可选值，用来规定顺序，必须是函数返回值,对数组的引用。</p><p><strong>注意事项:</strong></p></li><li><p>请注意，数组在原数组上进行排序，不生成副本。</p></li><li><p>说明：这里的排序是针对字符的排序，先使用数组的toString()方法转为字符串，再逐位比较，</p></li></ul><p><strong>例1：对数组字符串元素进行排序</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span>, <span class="token string">"g"</span>, <span class="token string">"c"</span>, <span class="token string">"x"</span>, <span class="token string">"b"</span>, <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.sort<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'c'</span>, <span class="token string">'e'</span>, <span class="token string">'g'</span>, <span class="token string">'x'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><strong>例2：对数组数字元素进行排序</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 4, 6, 2, 8, 5<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.sort<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span> //<span class="token punctuation">[</span> 1, 2, 4, 5, 6, 8 <span class="token punctuation">]</span></code></pre><h2 id="slice方法"><a href="#slice方法" class="headerlink" title="slice方法"></a>slice方法</h2><p> slice() 方法可从已有的数组中返回选定的元素。功能主要是截取指定位置的数组，并且返回截取的数组，不会改变原数组，slice()方法可提取字符串端某个部分，并且以新的字符串返回被提取的部分</p><p> <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">array.slice<span class="token punctuation">(</span>start,end<span class="token punctuation">)</span></code></pre><p> <strong>参数说明：</strong></p><ul><li>start为可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推</li><li>end也为可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</li><li>返回值：    返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</li><li>注意:可从已有的数组中返回选定的元素。该方法接收两个参数slice(start,end)，strat为必选，表示从第几位开始；end为可选，表示到第几位结束(不包含end位)，省略表示到最后一位；start和end都可以为负数，负数时表示从最后一位开始算起，如-1表示最后一位。</li></ul><p><strong>例2：截取数组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span>, <span class="token string">"g"</span>, <span class="token string">"c"</span>, <span class="token string">"x"</span>, <span class="token string">"b"</span>, <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.slice<span class="token punctuation">(</span>1, 4<span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//下标是从0开始，第一为这是”g“,由于结束是第4位结束<span class="token punctuation">(</span>不包含4位<span class="token punctuation">)</span>，则省略第4为是"b”的值，结果为<span class="token punctuation">[</span> <span class="token string">'g'</span>, <span class="token string">'c'</span>, <span class="token string">'x'</span> <span class="token punctuation">]</span></code></pre><h2 id="splice方法"><a href="#splice方法" class="headerlink" title="splice方法"></a>splice方法</h2><p>splice()方法向数组中添加，或从数组删除，或替换数组中的原始，然后返回被删除/替换的元素。该方法会改变原始数组。<br> <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">arrayObject.splice<span class="token punctuation">(</span>index,howmany，item1,<span class="token punctuation">..</span>.itemX<span class="token punctuation">)</span></code></pre><p> <strong>参数说明：</strong></p><ul><li><p>index必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</p></li><li><p>howmany必需。要删除的项目数量。如果设置为 0，则不会删除项目。    </p></li><li><p>item1, …, itemX,为可选，向数组添加的新项目</p></li><li><p><strong>返回值：</strong></p></li><li><p>array,包含被删除项目的新数组，如果有的话<br>说明 splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。</p></li><li><p>请<code>注意</code>，splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改。</p></li></ul><p><strong>例1.删除第一项</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span>, <span class="token string">"green"</span>, <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.splice<span class="token punctuation">(</span>0, 1<span class="token punctuation">)</span><span class="token punctuation">;</span>  //删除第一项</code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">"green"</span>, <span class="token string">"blue"</span> <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//red，返回数组中值包含一项</code></pre><p><strong>例2.从位置1开始插入两项</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span>, <span class="token string">"green"</span>, <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.splice<span class="token punctuation">(</span>1, 0, <span class="token string">"yellow"</span>, <span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //从位置1开始插入两项</code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span><span class="token string">"red"</span>, <span class="token string">"yellow"</span>, <span class="token string">"orange"</span>, <span class="token string">"green"</span>, <span class="token string">"blue"</span> <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//返回的是一个空数组<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><p><strong>例3.插入两项，删除一项</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span>, <span class="token string">"greens"</span>, <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.splice<span class="token punctuation">(</span>1, 2, <span class="token string">"hhh"</span>, <span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">'red'</span>, <span class="token string">'hhh'</span>, <span class="token string">'purple'</span> <span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span>//<span class="token punctuation">[</span> <span class="token string">'greens'</span>, <span class="token string">'blue'</span> <span class="token punctuation">]</span></code></pre><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>toString()功能是将数组转换为字符串，类似于没有参数的join.该方法会在数据发生隐式类型转换时被自动调用，如果手动调用，就是直接转为字符串。不会改变原数组<br> <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">booleanObject.toString<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> <strong>返回值：</strong></p><ul><li>根据原始布尔值或者 booleanObject 对象的值返回字符串 “true” 或 “false”。</li></ul><p><strong>例.数组转换为字符串</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span>, <span class="token string">'李四'</span>, <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.toString<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">'张三'</span>, <span class="token string">'李四'</span>, <span class="token string">'王五'</span><span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> 张三, 李四, 王五</code></pre><h2 id="IndexOf"><a href="#IndexOf" class="headerlink" title="IndexOf()"></a>IndexOf()</h2><p> IndexOf()方法根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引<br> <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">stringObject.indexOf<span class="token punctuation">(</span>searchvalue,fromindex<span class="token punctuation">)</span></code></pre><p> <strong>参数说明：</strong></p><ul><li><p>searchvalue是必需的。规定需检索的字符串值。</p></li><li><p>fromindex是可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p></li><li><p>该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。</p></li><li><p>注意：如果找到该数据，立即返回该数据的索引，不再往后继续查找</p></li></ul><p><strong>例.查找数组是否包含某个元素</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span>, <span class="token string">'李四'</span>, <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.indexOf<span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token keyword">let</span> n <span class="token operator">=</span> arr.indexOf<span class="token punctuation">(</span><span class="token string">'李四1'</span><span class="token punctuation">)</span><span class="token keyword">let</span> n1 <span class="token operator">=</span> arr.indexOf<span class="token punctuation">(</span><span class="token string">'李四'</span>, 2<span class="token punctuation">)</span>//<span class="token string">'李四'</span>是否在数组下标为2上面</code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> //1console.log<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> //-1console.log<span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span> //-1</code></pre><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf();"></a>lastIndexOf();</h2><p> lastIndexOf() 方法可返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。<br> <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">stringObject.lastIndexOf<span class="token punctuation">(</span>searchvalue,fromindex<span class="token punctuation">)</span></code></pre><p> <strong>参数说明：</strong></p><ul><li>searchvalue是必需的。规定需检索的字符串值。</li><li>fromindex为可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的最后一个字符处开始检索。</li><li>如果在 stringObject 中的 fromindex 位置之前存在 searchvalue，则返回的是出现的最后一个 searchvalue 的位置。</li><li>注意：如果要检索的字符串值没有出现，则该方法返回 -1。</li></ul><p><strong>例.返回一个指定的字符串值最后出现的位置</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span>, <span class="token string">'李四'</span>, <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.lastIndexOf<span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token keyword">let</span> n <span class="token operator">=</span> arr.lastIndexOf<span class="token punctuation">(</span><span class="token string">'李四1'</span><span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> //1console.log<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> //-1</code></pre><h2 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h2><p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。<br> <strong>基本语法:</strong></p><pre class=" language-bash"><code class="language-bash">stringObject.substring<span class="token punctuation">(</span>start,stop<span class="token punctuation">)</span></code></pre><p> <strong>参数说明：</strong></p><ul><li>start为必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。</li><li>stop为可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。</li><li>如果省略该参数，那么返回的子串会一直到字符串的结尾。</li><li>一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。</li></ul><p><strong>例.提取字符在3的位置内容</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr.substring<span class="token punctuation">(</span>3<span class="token punctuation">)</span></code></pre><p><strong>结果显示：</strong></p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> //lo world<span class="token operator">!</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON的基本使用说明</title>
      <link href="2020/102043700.html"/>
      <url>2020/102043700.html</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-json-">什么是 JSON ？</a></li><li><a href="#json-%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99">JSON 语法规则</a></li><li><a href="#json-%E5%90%8D%E7%A7%B0%E5%80%BC%E5%AF%B9">JSON 名称/值对</a></li><li><a href="#%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E5%80%BC">访问对象值</a></li><li><a href="#%E5%BE%AA%E7%8E%AF%E5%AF%B9%E8%B1%A1">循环对象</a></li><li><a href="#json-%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84">JSON 对象中的数组</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E5%80%BC">修改数组值</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0">删除数组元素</a></li></ul></li></ul><h2 id="什么是-JSON-？"><a href="#什么是-JSON-？" class="headerlink" title="什么是 JSON ？"></a>什么是 JSON ？</h2><pre><code>1.JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）2.JSON 是轻量级的文本数据交换格式3.JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许4.多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。5.JSON 具有自我描述性，更易理解</code></pre><p>例子：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;JavaScript 创建 JSON 对象&lt;/h2&gt;&lt;p&gt;网站名称: &lt;span id="jname"&gt;&lt;/span&gt;&lt;br /&gt; 网站地址: &lt;span id="jurl"&gt;&lt;/span&gt;&lt;br /&gt; 网站 slogan: &lt;span id="jslogan"&gt;&lt;/span&gt;&lt;br /&gt; &lt;/p&gt;&lt;script&gt;var JSONObject= {    "name":"菜鸟教程",    "url":"www.runoob.com",     "slogan":"学的不仅是技术，更是梦想！"};document.getElementById("jname").innerHTML=JSONObject.name document.getElementById("jurl").innerHTML=JSONObject.url document.getElementById("jslogan").innerHTML=JSONObject.slogan &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>结果显示</p><pre><code>JavaScript 创建 JSON 对象网站名称: 菜鸟教程网站地址: www.runoob.com网站 slogan: 学的不仅是技术，更是梦想！</code></pre><h2 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h2><p>JSON 语法是 JavaScript 对象表示语法的子集。</p><pre><code>1.数据在名称/值对中2.数据由逗号分隔3.大括号保存对象4.中括号保存数组</code></pre><h2 id="JSON-名称-值对"><a href="#JSON-名称-值对" class="headerlink" title="JSON 名称/值对"></a>JSON 名称/值对</h2><p>JSON 数据的书写格式是：名称/值对。</p><p>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：</p><pre><code>"name" : "菜鸟教程"这很容易理解，等价于这条 JavaScript 语句：name = "菜鸟教程"</code></pre><h2 id="访问对象值"><a href="#访问对象值" class="headerlink" title="访问对象值"></a>访问对象值</h2><p>你可以使用点号（.）来访问对象的值：</p><pre><code>&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;你可以使用点号（.）来访问 JSON 对象的值：&lt;/p&gt;&lt;p id="demo"&gt;&lt;/p&gt;&lt;script&gt;var myObj, x;myObj = { "name":"runoob", "alexa":10000, "site":null };x = myObj.name;document.getElementById("demo").innerHTML = x;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><pre><code>你可以使用点号（.）来访问 JSON 对象的值：runoob</code></pre><h2 id="循环对象"><a href="#循环对象" class="headerlink" title="循环对象"></a>循环对象</h2><p>你可以使用 for-in 来循环对象的属性：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;使用 for-in 来循环对象的属性:&lt;/p&gt;&lt;p id="demo"&gt;&lt;/p&gt;&lt;script&gt;var myObj = { "name":"runoob", "alexa":10000, "site":null };for (x in myObj) {    document.getElementById("demo").innerHTML += x + "&lt;br&gt;";}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><pre><code>使用 for-in 来循环对象的属性:namealexasite</code></pre><h2 id="JSON-对象中的数组"><a href="#JSON-对象中的数组" class="headerlink" title="JSON 对象中的数组"></a>JSON 对象中的数组</h2><p>对象属性的值可以是一个数组：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;访问 JSON 对象数组值。&lt;/p&gt;&lt;p id="demo"&gt;&lt;/p&gt;&lt;script&gt;var myObj, x;myObj = {    "name":"网站",    "num":3,    "sites":[ "Google", "Runoob", "Taobao" ]}x = myObj.sites[0];document.getElementById("demo").innerHTML = x;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><pre><code>访问 JSON 对象数组值。Google</code></pre><h2 id="修改数组值"><a href="#修改数组值" class="headerlink" title="修改数组值"></a>修改数组值</h2><p>你可以使用索引值来修改数组值：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;修改 JSON 对象数组值。&lt;/p&gt;&lt;p id="demo"&gt;&lt;/p&gt;&lt;script&gt;var myObj, i, x = "";myObj = {    "name":"网站",    "num":3,    "sites":[ "Google", "Runoob", "Taobao" ]}; myObj.sites[1] = "Github";for (i in myObj.sites) {    x += myObj.sites[i] + "&lt;br&gt;";}document.getElementById("demo").innerHTML = x;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><pre><code>修改 JSON 对象数组值。GoogleGithubTaobao</code></pre><h2 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h2><p>我们可以使用 delete 关键字来删除数组元素：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;删除数组元素&lt;/p&gt;&lt;p id="demo"&gt;&lt;/p&gt;&lt;script&gt;var myObj, i, x = "";myObj = {    "name":"网站",    "num":3,    "sites":[ "Google", "Runoob", "Taobao" ]};delete myObj.sites[1];for (i in myObj.sites) {    x += myObj.sites[i] + "&lt;br&gt;";}document.getElementById("demo").innerHTML = x;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><pre><code>删除数组元素GoogleTaobao</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
